import logging
import loader
from datetime import datetime, timedelta
from html import escape

from aiogram import Router, F, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery
from sqlalchemy.orm.session import Session

from bot.utils.deadline_utils import deadline_converted_output
from bot.keyboards.rating_service_keyboards import info_rating_keyboard
from bot.services.s3_services import S3Services
from bot.constants.rating import *
from bot.keyboards.start_keyboards import *
from bot.states.start_states import *
from bot.services.rating_services import RatingService
from bot.routers.subscribe_router import set_subscription
from db.models import *
from db.crud import CommonCRUDOperations as crud

from bot.services.services_manager import service_manager

r = Router(name="start_router")


@r.callback_query(F.data == "continue")
async def continue_handler(
    cb: types.CallbackQuery, state: FSMContext, db_session: Session, user: User
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

    :param cb: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (Finite State Machine)
    :param db_session: –°–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        last_command = data.get("last_command")
        logging.info(f"Last command for user {user.telegram_id}: {last_command}")
        if not user.is_registered:
            logging.info(f"Starting registration for user {user.telegram_id}")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await state.set_state(Registration.phone)
            await cb.message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deadline bot! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=send_phone_number_keyboard(),
            )
        elif last_command:
            await cb.message.answer(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {last_command}")
            if last_command == "/start":
                logging.debug("Redirecting to start_handler")
                await start_handler(cb.message, state, db_session, user)
        else:
            logging.debug(
                f"No last command found for user {user.telegram_id}, showing main menu"
            )
            await cb.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        logging.info(
            f"Successfully processed continue request for user {user.telegram_id}"
        )

    except Exception as e:
        logging.error(
            f"Error in continue handler for user {user.telegram_id}: {str(e)}",
            exc_info=True,
        )
        await cb.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)


async def continue_registration(msg: types.Message, state: FSMContext, user: User):
    if user.skills:
        await state.set_state(Registration.bio)
        message = await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=choose_notification_type(user.notification_types),
        )
        return await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )

    if user.prof_level:
        await state.set_state(Registration.skills)
        message = await msg.answer(
            "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µüëá",
            reply_markup=None,
        )
        return await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )

    if user.payment_types:
        await state.set_state(Registration.prof_level)
        message = await msg.answer(
            "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é?",
            reply_markup=choose_prof_level(),
        )
        return await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )

    if user.juridical_type:
        await state.set_state(Registration.payment_types)
        message = await msg.answer(
            "–ö–∞–∫–∏–µ –≤–∏–¥—ã –æ–ø–ª–∞—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã?",
            reply_markup=choose_payment_types(user.payment_types),
        )
        return await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )

    if user.country:
        await state.set_state(Registration.juridical_type)
        message = await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:", reply_markup=choose_juridical_type()
        )
        return await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )

    if user.roles:
        await state.set_state(Registration.country)
        message = await msg.answer("–í—ã –∏–∑ –†–æ—Å—Å–∏–∏?", reply_markup=choose_country())
        return await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )

    if user.phone:
        await state.set_state(Registration.role)
        message = await msg.answer(
            "–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω.", reply_markup=types.ReplyKeyboardRemove()
        )
        await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )
        message = await msg.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
            reply_markup=choose_role_keyboard(user.roles),
        )
        return await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )

    return None


@r.message(Command("hello_world_123"))
async def hello_world_test_handler(msg: types.Message):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ zero-downtime deployment
    """
    await msg.answer("Hello World! üöÄ Zero downtime deployment works!")


@r.message(F.text.startswith("/start"))
async def start_handler(
    msg: types.Message, state: FSMContext, db_session: Session, user: User
):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ—Å—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –ï—Å–ª–∏ —é–∑–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (is_registered = False), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å.
    """

    if user.telegram_id < 0:
        return await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if msg.text == '/start continue':
        if user or not user.is_registered:
            return await continue_registration(msg=msg, state=state, user=user)

    await state.clear()
    if "task" in msg.text:
        try:
            task_id = int(msg.text.replace("/start task", ""))
            task = db_session.query(Task).filter(Task.id == task_id).first()

            if task:
                formatted_text = (
                    f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>: {task.number_of_reminders or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n\n'
                    if task.number_of_reminders and task.number_of_reminders > 0
                    else ""
                )

                await msg.answer(
                    f"<b>–ó–∞–¥–∞—á–∞</b>:  {task.title}\n\n"
                    f'<b>–†–∞–∑–º–µ—Å—Ç–∏–ª:</b> {task.author.full_name + (" @" + task.author.username if task.author.username else "")}\n\n'
                    f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {escape(task.title)}\n\n"
                    f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape(task.description) if task.description else "–≠—Ç–æ –±—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞"}\n\n'
                    f"<b>–ë—é–¥–∂–µ—Ç</b>: {str(task.budget_from) + ' - ' + str(task.budget_to) + ' —Ä—É–±.' if task.budget_from else '–ø–æ –¥–æ–≥–æ–≤–æ—Ä—É'}\n\n"
                    f"<b>–°—Ä–æ–∫</b>: {deadline_converted_output(task.deadline_days)}\n"
                    f'<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> {"–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ." if task.is_hard else "–û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞"}\n'
                    f"{formatted_text}"
                    f"<b>–¢–µ–≥–∏</b>: {', '.join(task.tags)}\n",
                    reply_markup=open_task(task),
                )

                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é

        except ValueError:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
    elif not user or not user.bio:
        await state.update_data(open_task=None)
        if not user:
            user = User(
                telegram_id=msg.from_user.id,
                username=msg.from_user.username,
                full_name=msg.from_user.full_name,
            )
            photos = await msg.from_user.get_profile_photos()
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if photos.photos:
                photo_id = photos.photos[0][-1].file_id
                file_info = await msg.bot.get_file(photo_id)
                file = await msg.bot.download_file(file_info.file_path)
                object_name = "profile-photo." + file_info.file_path.split(".")[-1]
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                s3_client = S3Services()  # –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º bucket_name
                user.profile_photo_url = await s3_client.upload_file(
                    object_name=object_name,
                    file=file,
                    user_id=msg.from_user.id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
            db_session.add(user)
        if "ref" in msg.text:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç –∞–π–¥–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                ref_id = int(msg.text.replace("/start ref", ""))
                # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –≤ –±–∞–∑–µ
                ref = db_session.query(User).filter(User.telegram_id == ref_id).first()
                # –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∞–π–¥–∏ –≤ reff_telegram_id —é–∑–µ—Ä–∞ –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                if ref:
                    user.reff_telegram_id = ref.telegram_id
                    if ref.free_task_period:
                        ref.free_task_period = max(
                            ref.free_task_period + timedelta(days=5),
                            datetime.now() + timedelta(days=5),
                        )
                    else:
                        ref.free_task_period = datetime.now() + timedelta(days=5)
            except ValueError:
                pass
        elif "task" in msg.text:
            try:
                task_id = int(msg.text.replace("/start task", ""))
                task = db_session.query(Task).filter(Task.id == task_id).first()
                if task:
                    await state.update_data(open_task=task.id)
            except ValueError:
                pass
        # –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É
        db_session.commit()
        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
        await state.set_state(Registration.role)
        message = await msg.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deadline bot! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n'
            '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.',
            reply_markup=choose_role_keyboard(user.roles)
        )
    else:
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@r.message(Registration.phone, F.contact)
async def get_phone(
    msg: types.Message, state: FSMContext, db_session: Session, user: User
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"""
    user.phone = msg.contact.phone_number
    db_session.commit()
    await state.set_state(Registration.notifications)
    message = await msg.answer('–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω.', reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(last_message={'text': message.text, 'reply_markup': message.reply_markup})
    message = await msg.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç —Å–∏—Å—Ç–µ–º—ã:',
        reply_markup=choose_notification_type(user.notification_types)
    )


@r.message(
    Registration.phone,
)
async def handle_unselected_phone(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –≤—ã–±—Ä–∞–≤ –≤–∞—Ä–∏–∞–Ω—Ç.
    """
    data = await state.get_data()
    last_message = data.get("last_message")
    if last_message:
        await msg.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        await msg.answer(
            last_message["text"], reply_markup=last_message["reply_markup"]
        )


@r.callback_query(Registration.role)
async def get_role(
    cb: types.CallbackQuery, state: FSMContext, db_session: Session, user: User
):
    """–í—ã–±–æ—Ä —Ä–æ–ª–µ–π. –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –¥–∞–ª–µ–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª–µ–µ (–≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã).
    –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É, –∑–Ω–∞—á–∏—Ç –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä"""
    if cb.data == "next":
        if not user.roles:
            await cb.answer("‚ö†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å")
            return
        await state.set_state(Registration.country)
        message = await cb.message.edit_text(
            "–í—ã –∏–∑ –†–æ—Å—Å–∏–∏?", reply_markup=choose_country()
        )
        await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )
    else:
        if RoleType[cb.data] in user.roles:
            user.roles.remove(RoleType[cb.data])
        else:
            user.roles.append(RoleType[cb.data])
        db_session.commit()
        await cb.message.edit_reply_markup(
            reply_markup=choose_role_keyboard(user.roles)
        )


@r.callback_query(Registration.country)
async def get_country(
    cb: types.CallbackQuery, state: FSMContext, db_session: Session, user: User
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–∏–∑ –†–§ –∏–ª–∏ –Ω–µ—Ç), –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å —é—Ä —Å—Ç–∞—Ç—É—Å"""
    user.country = CountryType[cb.data]
    db_session.commit()
    await state.set_state(Registration.juridical_type)
    message = await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:", reply_markup=choose_juridical_type()
    )
    await state.update_data(
        last_message={"text": message.text, "reply_markup": message.reply_markup}
    )


@r.callback_query(Registration.juridical_type)
async def get_juridical_type(
    cb: types.CallbackQuery, state: FSMContext, db_session: Session, user: User
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —é—Ä.—Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—ã–±–æ—Ä —Å—Ä–µ–¥–∏ –æ–ø–ª–∞—Ç. –¢–∞–∫ –∂–µ –∫–∞–∫ –∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–µ–π"""
    user.juridical_type = JuridicalType[cb.data]
    db_session.commit()
    await state.set_state(Registration.payment_types)
    message = await cb.message.edit_text(
        "–ö–∞–∫–∏–µ –≤–∏–¥—ã –æ–ø–ª–∞—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã?",
        reply_markup=choose_payment_types(user.payment_types),
    )
    await state.update_data(
        last_message={"text": message.text, "reply_markup": message.reply_markup}
    )


@r.callback_query(Registration.payment_types)
async def get_payments(
    cb: types.CallbackQuery, state: FSMContext, db_session: Session, user: User
):
    """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ. —É—Ä–æ–≤–µ–Ω—å"""
    if cb.data == "next":
        if not user.payment_types:
            await cb.answer("‚ö†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
            return
        await state.set_state(Registration.prof_level)
        message = await cb.message.edit_text(
            "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é?",
            reply_markup=choose_prof_level(),
        )
        await state.update_data(
            last_message={"text": message.text, "reply_markup": message.reply_markup}
        )
    else:
        if PaymentType[cb.data] in user.payment_types:
            user.payment_types.remove(PaymentType[cb.data])
        else:
            user.payment_types.append(PaymentType[cb.data])
        db_session.commit()
        await cb.message.edit_reply_markup(
            reply_markup=choose_payment_types(user.payment_types)
        )


@r.callback_query(Registration.prof_level)
async def get_prof_level(
    cb: types.CallbackQuery, state: FSMContext, db_session: Session, user: User
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ. —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤"""
    user.prof_level = ProfessionalLevelType[cb.data]
    db_session.commit()
    await state.set_state(Registration.skills)
    message = await cb.message.edit_text(
        "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µüëá",
        reply_markup=None,
    )
    await state.update_data(
        last_message={"text": message.text, "reply_markup": message.reply_markup}
    )


@r.message(Registration.skills)
async def get_skills(
    msg: types.Message, state: FSMContext, db_session: Session, user: User
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    skills = [skill.replace(" ", "") for skill in msg.text.split(",")]
    user.skills = skills
    db_session.commit()
    await state.set_state(Registration.bio)
    message = await msg.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∏–∑ –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å –Ω—É–ª—èüëá"
    )
    await state.update_data(
        last_message={"text": message.text, "reply_markup": message.reply_markup}
    )


@r.message(Registration.bio)
async def get_bio(
    msg: types.Message, state: FSMContext, db_session: Session, user: User
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user.bio = msg.text
    db_session.commit()
    await state.set_state(Registration.phone)
    message = await msg.answer(
        f'''–ì–æ—Ç–æ–≤–æ. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç,–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.
        \n<b>–í–Ω–∏–º–∞–Ω–∏–µ, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–∏—Ñ—Ä, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ</b>:''',
        reply_markup=send_phone_number_keyboard()
    )


async def new_user_notification(bot, user):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    :param bot: –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
    :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    try:    

        if not loader.ADMINS:
            logging.warning("–°–ø–∏—Å–æ–∫ ADMINS –ø—É—Å—Ç!")
            return
            
        bio_text = user.bio

        for admin in loader.ADMINS:
            try:
                await bot.send_message(
                    admin,
                    f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ: <b>{user.full_name}</b>\n'
                    f'–ê–¥—Ä–µ—Å: <b>{user.username}</b>\n'
                    f'ID Telegram: <b>{user.telegram_id}</b>\n'
                    f'ID –≤ –±–∞–∑–µ: <b>{user.id}</b>\n'
                    f'–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{bio_text[0:401]}</i>'
                )
                logging.info(f"Send notification per {user.username} for {admin}")
            except TelegramBadRequest as e:
                logging.error(f"error sending to admin {admin}: {e}")
            except Exception as e:
                logging.error(f"Unknown error with admin {admin}: {e}")
    
    except Exception as e:
        logging.error(f"Critical error in new_user_notification: {e}")


@r.callback_query(Registration.notifications)
async def get_notifications(cb: CallbackQuery, state: FSMContext, db_session, user, service_manager):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–∞–∫–æ–π –∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–µ–π –∏ –æ–ø–ª–∞—Ç).
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞"""
    if cb.data == "next":
        if not user.notification_types:
            await cb.answer("‚ö†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
            return
        await cb.message.delete()
        if user.is_registered:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–æ–≤–∏—á–æ–∫ –∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
            await cb.bot.send_message(cb.from_user.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω.")
            await state.clear()
        else:
            # –µ—Å–ª–∏ –Ω–æ–≤–∏—á–æ–∫, –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω
            await new_user_notification(cb.bot, user)
            user.is_registered = True
            user.registered_at = datetime.now()
            user_rating = (
                db_session.query(Rating).where(Rating.user_id == user.id).one_or_none()
            )
            if not user_rating:
                rating = Rating(
                    user_id=user.id,
                    score=0,
                )
                db_session.add(rating)
            db_session.commit()
            if not user_rating:
                await RatingService.user_rating_change(
                    session=db_session,
                    users_id=user.id,
                    change_direction=RaitingChangeDirection.PLUS,
                    score=REGISRATION_RATING_INCREASE,
                    comment=REGISRATION_RATING_INCREASE_COMMENT,
                )
                await cb.bot.send_message(
                    cb.from_user.id,
                    "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n",
                    reply_markup=info_rating_keyboard(),
                )

            await service_manager.rating_services.add_weekly_rating_tasks(user.id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
            if RoleType.FREELANCER in user.roles:
                await service_manager.rating_services.add_resume_reminder_tasks(user.id)

            if user.reff_telegram_id:
                ref = (
                    db_session.query(User)
                    .where(User.telegram_id == user.reff_telegram_id)
                    .first()
                )
                if ref:
                    await RatingService.user_rating_change(
                        session=db_session,
                        users_id=ref.id,
                        change_direction=RaitingChangeDirection.PLUS,
                        score=USERS_INVOLVEMENT_RATING_INCREASE,
                        comment=USERS_INVOLVEMENT_RATING_INCREASE_COMMENT,
                    )
                    await cb.bot.send_message(
                        cb.from_user.id,
                        TEXT_RATING_INFO,
                    )
            data = await state.get_data()

            if RoleType.FREELANCER in user.roles:
                await state.clear()
                await cb.bot.send_message(
                    cb.from_user.id,
                    "–ß—Ç–æ –±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö, –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. /sub",
                )
            else:
                await state.clear()
                await cb.bot.send_message(
                    cb.from_user.id,
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newtask",
                )

            
            if data['open_task']:
                task = db_session.query(Task).get(data['open_task'])
                await cb.bot.send_message(
                    cb.from_user.id,
                    "–û—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –Ω–∞ –≤–∞—à–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:",
                )
                message_text = f"<b>–ó–∞–∫–∞–∑:</b> {task.title}\n\n" \
                               f"<b>–†–∞–∑–º–µ—Å—Ç–∏–ª:</b> {task.author.full_name + (' @' + task.author.username if task.author.username else '')}\n" \
                               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}\n" \
                               f"<b>–ë—é–¥–∂–µ—Ç–∞:</b> {str(task.budget_from) + ' - ' + str(task.budget_to) + '‚ÇΩ' if task.budget_from else '–ø–æ –¥–æ–≥–æ–≤–æ—Ä—É'}\n" \
                               f"<b>–°—Ä–æ–∫</b> {deadline_converted_output(task.deadline_days)}\n" \
                               f"<b>–¢–µ–≥–∏</b>: {', '.join(task.tags)}"
                await cb.bot.send_message(cb.from_user.id, message_text, reply_markup=open_task(task))
    else:
        if NotificationType[cb.data] in user.notification_types:
            user.notification_types.remove(NotificationType[cb.data])
        else:
            user.notification_types.append(NotificationType[cb.data])
        db_session.commit()
        await cb.message.edit_reply_markup(
            reply_markup=choose_notification_type(user.notification_types)
        )


@r.message(Registration.role)
@r.message(Registration.country)
@r.message(Registration.juridical_type)
@r.message(Registration.payment_types)
@r.message(Registration.prof_level)
@r.message(Registration.phone, F.contact)
@r.message(Registration.notifications)
async def handle_unselected_message(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –≤—ã–±—Ä–∞–≤ –≤–∞—Ä–∏–∞–Ω—Ç.
    """
    data = await state.get_data()
    last_message = data.get("last_message")
    if last_message:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        await msg.answer(
            last_message["text"], reply_markup=last_message["reply_markup"]
        )


@r.message(Command("myusers"))
async def show_users(
    message: types.Message, state: FSMContext, db_session: Session, user: User
):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º
    contracts = (
        db_session.query(Contract)
        .filter(
            Contract.client_id == user.id,
            Contract.status.in_(
                [ContractStatusType.COMPLETED, ContractStatusType.ATWORK]
            ),
        )
        .order_by(Contract.created_at.desc())
        .all()
    )

    if not contracts:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    performers = {}
    for contract in contracts:
        if contract.freelancer_id not in performers:
            freelancer = contract.freelancer

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            completed_tasks = (
                db_session.query(Contract)
                .filter(
                    Contract.freelancer_id == freelancer.id,
                    Contract.client_id == user.id,
                    Contract.status == ContractStatusType.COMPLETED,
                )
                .all()
            )

            active_tasks = (
                db_session.query(Contract)
                .filter(
                    Contract.freelancer_id == freelancer.id,
                    Contract.client_id == user.id,
                    Contract.status == ContractStatusType.ATWORK,
                )
                .all()
            )

            completed_sum = sum(c.budget for c in completed_tasks if c.budget)
            active_sum = sum(c.budget for c in active_tasks if c.budget)

            performers[contract.freelancer_id] = {
                "user": freelancer,
                "completed_count": len(completed_tasks),
                "completed_sum": completed_sum,
                "active_count": len(active_tasks),
                "active_sum": active_sum,
                "last_completed": (
                    max([c.created_at for c in completed_tasks])
                    if completed_tasks
                    else None
                ),
            }

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    performers_list = list(performers.values())[:30]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "–í–∞—à–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n\n"
    for p in performers_list:
        freelancer = p["user"]
        message_text += (
            f"üë§ {freelancer.full_name}"
            + (f" (@{freelancer.username})" if freelancer.username else "")
            + "\n"
            f"üì± {freelancer.phone if freelancer.phone else '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚úÖ –°–¥–∞–Ω–æ –∑–∞–¥–∞—á: {p['completed_count']} –Ω–∞ —Å—É–º–º—É {p['completed_sum']}‚ÇΩ\n"
            f"‚ö°Ô∏è –í —Ä–∞–±–æ—Ç–µ: {p['active_count']} –Ω–∞ —Å—É–º–º—É {p['active_sum']}‚ÇΩ\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(performers=performers_list)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await message.answer(
        message_text,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–ü–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
                        callback_data="sort_performers:date",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
                        callback_data="sort_performers:count",
                    )
                ],
            ]
        ),
    )


@r.callback_query(F.data.startswith("sort_performers:"))
async def sort_performers(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    """
    sort_type = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    data = await state.get_data()
    performers_list = data.get("performers", [])

    if not performers_list:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if sort_type == "date":
        performers_list.sort(
            key=lambda x: x["last_completed"] if x["last_completed"] else datetime.min,
            reverse=True,
        )
    else:  # sort_type == "count"
        performers_list.sort(key=lambda x: x["completed_count"], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message_text = "–í–∞—à–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n\n"
    for p in performers_list:
        freelancer = p["user"]
        new_message_text += (
            f"üë§ {freelancer.full_name}"
            + (f" (@{freelancer.username})" if freelancer.username else "")
            + "\n"
            f"üì± {freelancer.phone if freelancer.phone else '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚úÖ –°–¥–∞–Ω–æ –∑–∞–¥–∞—á: {p['completed_count']} –Ω–∞ —Å—É–º–º—É {p['completed_sum']}‚ÇΩ\n"
            f"‚ö°Ô∏è –í —Ä–∞–±–æ—Ç–µ: {p['active_count']} –Ω–∞ —Å—É–º–º—É {p['active_sum']}‚ÇΩ\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message.text == new_message_text:
        await callback.answer("–°–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
    try:
        await callback.message.edit_text(
            new_message_text,
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="–ü–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
                            callback_data="sort_performers:date",
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
                            callback_data="sort_performers:count",
                        )
                    ],
                ]
            ),
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

    await callback.answer()


# This is test command for test notifications
# @r.message(Command("testallnotif"))
# async def test_all_notifications(message: Message, user: User):
#     """–¢–µ—Å—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑–æ–º —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 2 —Å–µ–∫—É–Ω–¥—ã"""
#     now = datetime.now()
    
#     # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#     notifications = [
#         ("first_weekly_rating_advance_notification", "–ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 2 —Å–µ–∫)"),
#         ("second_weekly_rating_advance_notification", "–í—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 4 —Å–µ–∫)"),
#         ("third_weekly_rating_advance_notification", "–¢—Ä–µ—Ç—å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 6 —Å–µ–∫)"),
#         ("fourth_weekly_rating_advance_notification", "–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 8 —Å–µ–∫)"),
#         ("fifth_weekly_rating_advance_notification", "–ü—è—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 10 —Å–µ–∫)"),
#         ("sixth_weekly_rating_advance_notification", "–®–µ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 12 —Å–µ–∫)"),
#         ("rating_weekly_update", "–£–≤–µ–¥–º–æ–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ (—á–µ—Ä–µ–∑ 14 —Å–µ–∫)"),
#     ]
    
#     for i, (method_name, description) in enumerate(notifications, 1):
#         test_time = now + timedelta(seconds=i * 2)
        
#         # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –ø–æ –∏–º–µ–Ω–∏
#         method = getattr(service_manager.rating_services, method_name)
        
#         await service_manager.scheduler_services.add_job(
#             user.id,
#             description,
#             test_time,
#             method,
#             f"test_{method_name}",
#         )
    
#     await message.answer(
#         "‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã!\n\n"
#         "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
#         "‚Ä¢ –ß–µ—Ä–µ–∑ 2 —Å–µ–∫ - –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
#         "‚Ä¢ –ß–µ—Ä–µ–∑ 4 —Å–µ–∫ - –í—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"  
#         "‚Ä¢ –ß–µ—Ä–µ–∑ 6 —Å–µ–∫ - –¢—Ä–µ—Ç—å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
#         "‚Ä¢ –ß–µ—Ä–µ–∑ 8 —Å–µ–∫ - –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
#         "‚Ä¢ –ß–µ—Ä–µ–∑ 10 —Å–µ–∫ - –ü—è—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
#         "‚Ä¢ –ß–µ—Ä–µ–∑ 12 —Å–µ–∫ - –®–µ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
#         "‚Ä¢ –ß–µ—Ä–µ–∑ 14 —Å–µ–∫ - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
#         "–ñ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è! ‚úÖ"
#     )
