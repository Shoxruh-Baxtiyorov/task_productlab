from aiogram import Router, F, types
from aiogram.filters import Command

import loader
from bot.states.subscription_states import SubscriptionState
from bot.keyboards.subscription_keyboards import *

from db.models import Subscription, SubscriptionType, SubscriptionStatusType, SubscriptionReasonType

import aio_pika

r = Router(name='subscribe_router')


@r.callback_query(F.data == 'my_subs')
async def get_my_subs(cb, user):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    :param cb: –∫–æ–ª–ª–±–µ–∫
    :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    """
    await cb.message.edit_text(
        '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:',
        reply_markup=my_subscriptions_list(user.my_subscriptions)
    )


@r.callback_query(F.data.startswith('view_sub:'))
async def view_sub_handler(cb, db_session):
    """
    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    :param cb: –∫–æ–ª–ª–±–µ–∫
    :param db_session: —Å–µ—Å—Å–∏—è –ë–î
    """
    sub = db_session.query(Subscription).filter(
        Subscription.id == int(cb.data.replace('view_sub:', ''))).first()
    await cb.message.edit_text(
        f'–¢–µ–≥–∏: <b>{", ".join(sub.tags)}</b>\n'
        f'–¢–∏–ø: <b>{"–ò–õ–ò" if sub.type == SubscriptionType.OR else "–ò"}</b>\n'
        f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: <b>{"–Ω–µ –∑–∞–¥–∞–Ω" if not sub.budget_from else str(sub.budget_from) + " ‚ÇΩ"}</b>\n'
        f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: <b>{"–Ω–µ –∑–∞–¥–∞–Ω" if not sub.budget_to else str(sub.budget_to) + " ‚ÇΩ"}</b>\n'
        f'–°—Ç–∞—Ç—É—Å: <b>{"–í–ö–õ" if sub.status == SubscriptionStatusType.SEND else "–û–¢–ö–õ"}</b>',
        reply_markup=my_subscription_view(sub)
    )


@r.callback_query(F.data.startswith('sub_on_off:'))
async def sub_on_off_handler(cb: types.CallbackQuery, db_session):
    """
    –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    :param cb: –∫–æ–ª–ª–±–µ–∫
    :param db_session: —Å–µ—Å—Å–∏—è –ë–î
    """
    sub = db_session.query(Subscription).filter(
        Subscription.id == int(cb.data.replace('sub_on_off:', ''))).first()
    if sub.status == SubscriptionStatusType.SEND:
        sub.status = SubscriptionStatusType.DONTSEND
        await cb.message.edit_text(
            cb.message.html_text.replace('–í–ö–õ', '–û–¢–ö–õ'),
            reply_markup=my_subscription_view(sub)
        )
    else:
        sub.status = SubscriptionStatusType.SEND
        await cb.message.edit_text(
            cb.message.html_text.replace('–û–¢–ö–õ', '–í–ö–õ'),
            reply_markup=my_subscription_view(sub)
        )
    db_session.commit()


@r.callback_query(F.data.startswith('sub_del:'))
async def sub_del_handler(cb, db_session, user):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    :param cb: –∫–æ–ª–ª–±–µ–∫
    :param db_session: —Å–µ—Å—Å–∏—è –ë–î
    :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    db_session.query(Subscription).filter(
        Subscription.id == int(cb.data.replace('sub_del:', ''))).delete()
    db_session.commit()
    await cb.message.edit_text(
        '–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞',
        reply_markup=my_subscriptions_list(user.my_subscriptions)
    )


async def set_subscription(event, state):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    :param event: —Å–æ–±—ã—Ç–∏–µ
    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —é–∑–µ—Ä–∞
    """
    await state.set_state(SubscriptionState.tags)
    await event.bot.send_message(
        event.from_user.id,
        '–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à—É –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. '
        '–ü—Ä–∏–º–µ—Ä: <b>figma, design, python, fastapi</b>.'
    )


@r.callback_query(F.data == 'add_sub')
async def set_subscription_callback(cb, state):
    """
    –ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–æ–ª–ª–±–µ–∫–∞
    :param cb: –∫–æ–ª–ª–±–µ–∫
    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await set_subscription(cb, state)
    await cb.message.delete()


@r.message(Command('sub'))
async def set_subscription_command(msg, state):
    """
    –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /sub, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    await state.clear()
    if msg.chat.type == 'private':
        await set_subscription(msg, state)


@r.message(SubscriptionState.tags)
async def get_tags(msg, state):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–ò, –ò–õ–ò)
    """
    print('debug', msg.from_user.id)
    await state.update_data(tags=[tag.strip().lower() for tag in msg.text.split(',')])
    await state.set_state(SubscriptionState.budget)
    await msg.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–æ—Ç}-{–¥–æ}. –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <b>–ë–ï–ó –ü–†–û–ë–ï–õ–û–í</b>. '
        '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µüëá',
        reply_markup=choose_budget()
    )


@r.message(SubscriptionState.budget)
async def get_budget_msg(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±—é–¥–∂–µ—Ç –∑–∞–¥–∞—á–∏ (—á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏.
    """
    try:
        budget_from = int(msg.text.split('-')[0])
        budget_to = int(msg.text.split('-')[1])
        assert budget_from <= budget_to
    except:
        await msg.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–æ—Ç}-{–¥–æ}. –ë–ï–ó –ü–†–û–ë–ï–õ–û–í. –ü—Ä–∏–º–µ—Ä:\n\n'
            '55000-90000'
        )
    else:
        await state.set_state(SubscriptionState.subscription_type)
        await msg.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–∫–∞—Ç—å –¥–ª—è –≤–∞—Å –∑–∞–¥–∞—á–∏.\n\n'
            '–ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ò</b>, —Ç–æ –≤ –∑–∞–¥–∞—á–µ –¥–æ–ª–∂–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–≥–∏, '
            '–µ—Å–ª–∏ <b>–ò–õ–ò</b>, —Ç–æ –ª—é–±–æ–π –∏–∑ —Ç–µ–≥–æ–≤.',
            reply_markup=choose_subcription_type()
        )


@r.callback_query(SubscriptionState.budget)
async def get_budget_cb(cb, state):
    if cb.data == 'none':
        await state.update_data(budget_from=None, budget_to=None)
    else:
        budget = [int(i) for i in cb.data.split('-')]
        await state.update_data(budget_from=budget[0], budget_to=budget[1])
    await state.set_state(SubscriptionState.subscription_type)
    await cb.message.delete()
    await cb.bot.send_message(
        cb.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–∫–∞—Ç—å –¥–ª—è –≤–∞—Å –∑–∞–¥–∞—á–∏.\n\n'
        '–ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ò</b>, —Ç–æ –≤ –∑–∞–¥–∞—á–µ –¥–æ–ª–∂–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–≥–∏, '
        '–µ—Å–ª–∏ <b>–ò–õ–ò</b>, —Ç–æ –ª—é–±–æ–π –∏–∑ —Ç–µ–≥–æ–≤.',
        reply_markup=choose_subcription_type()
    )


@r.callback_query(SubscriptionState.subscription_type)
async def get_subscription_type(cb, state, db_session, user):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ. –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å—é–º–µ—Ä –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    """
    # —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await state.get_data()
    subscription = Subscription(
        user_id=user.id,
        type=SubscriptionType[cb.data],
        reason_added=SubscriptionReasonType.USER_SUBSCRIBED,
        **data
    )
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –∏ –∫–æ–º–º–∏—Ç
    db_session.add(subscription)
    db_session.commit()
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await state.clear()
    await cb.message.delete()
    await cb.bot.send_message(
        cb.from_user.id,
        '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –°–∫–æ—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–∫–∞–∑—ã.'
    )
    # –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä, –ø—É–±–ª–∏–∫—É—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—é–º–µ—Ä–∞ –ø–æ –ø–æ–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await publish_search_task_message(subscription)


@r.callback_query(F.data.startswith('turn_off_sub'))
async def turn_off_sub_handler(cb, db_session, user):
    subscription_id = int(cb.data.replace('turn_off_sub:', ''))
    subscription = db_session.query(Subscription).filter(Subscription.id == subscription_id).first()
    subscription.status = SubscriptionStatusType.DONTSEND
    db_session.commit()
    await cb.message.edit_reply_markup(None)
    await cb.answer('‚ö†Ô∏è–¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')


async def publish_search_task_message(subscription):
    """
    –ü—Ä–æ–¥—é—Å–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    """
    connection = await aio_pika.connect_robust(host=loader.RABBIT_HOST, port=5672, timeout=10)
    async with connection:
        routing_key = 'search_tasks'
        channel = await connection.channel()
        await channel.default_exchange.publish(
            aio_pika.Message(body=str(subscription.id).encode()),
            routing_key=routing_key
        )
        