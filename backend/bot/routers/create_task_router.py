from html import escape

from aiogram import Router, F, types
from aiogram.filters import Command

from bot.states.create_task_states import CreateTaskState
from bot.keyboards.create_task_keyboards import *
from db.models import User, Task
from db.crud import CommonCRUDOperations as crud

import aio_pika
import loader

from bot.utils.deadline_utils import deadline_message_validate, str_to_hours_converter, deadline_converted_output
from bot.states.create_task_states import AutoResponseState
from db.models import TaskAutoResponse

r = Router(name='create_task_router')


@r.message(Command('newtask'))
async def newtask_handler(msg, state):
    """
    –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /newtask. –ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–æ—Ä–º—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    """
    await state.clear()
    await state.set_state(CreateTaskState.title)
    await msg.answer(
        '–î–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ.'
    )



@r.message(Command('newhardtask'))
async def newhardtask_handler(msg, state):
    """
    –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /newtask. –ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–æ—Ä–º—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    """
    await state.clear()
    await state.set_state(CreateTaskState.title)
    await state.update_data(is_hard=True)
    await msg.answer(
        '–î–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ.'
    )


@r.message(CreateTaskState.title)
async def title_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    """
    await state.update_data(title=msg.text)
    await state.set_state(CreateTaskState.description)
    await msg.answer(
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ (–∫—Ä–æ–º–µ Notion, Google, Behance, Pinterest)'
    )


@r.message(CreateTaskState.description)
async def description_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–≥–∏ –∑–∞–¥–∞—á–∏.
    """
    await state.update_data(description=msg.text)
    await state.set_state(CreateTaskState.tags)
    await msg.answer(
        '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä:\n\n'
        '<b>figma, python, design, javascript</b>'
    )


@r.message(CreateTaskState.tags)
async def tags_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–≥–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±—é–¥–∂–µ—Ç –∑–∞–¥–∞—á–∏.
    """
    await state.update_data(tags=[tag.strip().lower() for tag in msg.text.split(',')])
    await state.set_state(CreateTaskState.price)
    await msg.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–æ—Ç}-{–¥–æ}. –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <b>–ë–ï–ó –ü–†–û–ë–ï–õ–û–í</b>. '
        '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µüëá',
        reply_markup=choose_budget()
    )


@r.message(CreateTaskState.price)
async def price_message_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±—é–¥–∂–µ—Ç –∑–∞–¥–∞—á–∏ (—á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏.
    """
    try:
        budget_from = int(msg.text.split('-')[0])
        budget_to = int(msg.text.split('-')[1])
        assert budget_from <= budget_to
    except:
        await msg.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–æ—Ç}-{–¥–æ}. –ë–ï–ó –ü–†–û–ë–ï–õ–û–í. –ü—Ä–∏–º–µ—Ä:\n\n'
            '55000-90000'
        )
    else:
        await state.update_data(budget_from=budget_from, budget_to=budget_to)
        await state.set_state(CreateTaskState.deadline)
        await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–º–µ—Ä 10–¥ 2—á, 12–¥, 5—á).')


@r.callback_query(CreateTaskState.price)
async def price_handler(cb, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±—é–¥–∂–µ—Ç –∑–∞–¥–∞—á–∏ (–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏.
    """
    if cb.data == 'none':
        await state.update_data(budget_from=None, budget_to=None)
    else:
        budget = [int(i) for i in cb.data.split('-')]
        await state.update_data(budget_from=budget[0], budget_to=budget[1])
    await cb.message.delete()
    await state.set_state(CreateTaskState.deadline)
    await cb.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–º–µ—Ä 10–¥ 2—á, 12–¥, 5—á)')


@r.message(CreateTaskState.deadline)
async def deadline_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.
    """
    msg_validated = deadline_message_validate(msg.text)
    if not msg_validated:
        await msg.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.')
    else:
        await state.update_data(deadline_days=str_to_hours_converter(msg_validated))
        data = await state.get_data()
        if data.get('is_hard'):
            await state.set_state(CreateTaskState.number_of_reminders)
            await msg.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏.')
        else:
            await confirm_task_sender(msg, state)


@r.message(CreateTaskState.number_of_reminders)
async def reminder_handler(msg, state):
    try:
        int(msg.text)
    except:
        return await msg.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¶–ï–õ–´–ú, –ë–ï–ó –ü–†–û–ë–ï–õ–û–í.')
    else:
        await state.update_data(number_of_reminders=int(msg.text))
        await state.set_state(CreateTaskState.is_lite_offer)
        await msg.answer(
            f'<b>–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫?</b>'
            '–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µüëá',
            reply_markup=choose_allow_lite_offer()
        )


@r.callback_query(CreateTaskState.is_lite_offer)
async def is_lite_offer_handler(cb: types.CallbackQuery, state):
    match cb.data:
        case 'yes':
            await state.update_data(is_lite_offer=True)
        case _:
            await state.update_data(is_lite_offer=False)

    await state.set_state(CreateTaskState.private_content)
    await cb.message.answer(
        f'<b>–ù–∞–ø–∏—à–∏ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.</b>'
    )

@r.message(CreateTaskState.private_content)
async def private_content_handler(msg, state):
    private_content = msg.text
    await state.update_data(private_content=private_content)
    await confirm_task_sender(msg, state)

async def confirm_task_sender(event, state):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ "—Å–±—Ä–æ—Å–∏—Ç—å"
    """
    task_data = await state.get_data()
    budget = f'–æ—Ç {task_data["budget_from"]}‚ÇΩ –¥–æ {task_data["budget_to"]}‚ÇΩ' if task_data["budget_from"] else '–ø–æ –¥–æ–≥–æ–≤–æ—Ä—É'

    number_of_reminders = (
        f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>: {task_data["number_of_reminders"]}\n' if task_data.get('number_of_reminders') else ''
    )

    private_content = (
        f'<b>–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> {task_data["private_content"]}\n\n' if task_data.get('private_content') else ''
    )
    await state.set_state(CreateTaskState.confirm)
    await event.bot.send_message(
        event.chat.id,
        f'<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π:</b>\n\n'
        f'<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {escape(task_data.get("title"))}\n\n'
        f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape(task_data["description"])}\n\n'
        f'<b>–ë—é–¥–∂–µ—Ç:</b> {budget}\n\n'
        f'<b>–°—Ä–æ–∫:</b> {deadline_converted_output(task_data["deadline_days"])}\n\n'
        f'{number_of_reminders}'
        f'{private_content}'
        f'<b>–¢–µ–≥–∏:</b> {", ".join(task_data["tags"])}\n\n',
        reply_markup=confirm_task()
    )


@r.callback_query(CreateTaskState.confirm)
async def confirm_task_handler(cb, state, db_session, user, bot, service_manager):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í —Å–ª—É—á–∞–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –í —Å–ª—É—á–∞–µ —Å–±—Ä–æ—Å–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç
    """
    if cb.data == 'confirm':
        state_data = await state.get_data()

        task = Task(
            author_id=user.id,
            **state_data,
        )
        db_session.add(task)
        db_session.commit()
        await publish_new_task(task)
        await cb.message.edit_text(
            f'–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –û–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–æ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ {loader.BOT_ADDRESS}?start=task{task.id}',
            reply_markup=None
        )
        await bot.send_message(user.telegram_id,
            '–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µüëá',
            reply_markup=choose_auto_response()
        )
        await state.clear()
        await state.set_state(AutoResponseState.select)
        await state.update_data(task_id=task.id)
        await service_manager.rating_services.update_rating_weekly_tasks(user.id)
    else:
        await cb.message.edit_text(
            '–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /newtask',
            reply_markup=None
        )
        await state.clear()



@r.callback_query(AutoResponseState.select)
async def all_auto_response_handler(cb, db_session, state):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
    """
    try:
        if not cb.data in ['all', 'rules', 'pass']:
            return
            
        data = await state.get_data()
        task_id = data.get('task_id')
        
        task = crud.get_task_by_id(session=db_session, task_id=task_id)
        if not task:
            await cb.message.edit_text('–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=None)
            await state.clear()
            return


        if cb.data == 'all':
            task.all_auto_responses = True
            db_session.commit()

            await cb.message.edit_text(
                '–û—Ç–∫–ª–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n'
                '–ö–∞–∂–¥—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è, –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç.'
            )
            await state.clear() 

        elif cb.data == 'rules':
            await state.set_state(AutoResponseState.budget)
            await cb.message.edit_text(
                '–ù–∞–ø–∏—à–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–æ—Ç}-{–¥–æ}. –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <b>–ë–ï–ó –ü–†–û–ë–ï–õ–û–í</b>. '
                '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µüëá',
                reply_markup=choose_budget()
            )
        else: 
            task.all_auto_responses = False
            db_session.commit()
            
            await state.clear()  
            await cb.message.edit_text(
                '–ñ–¥–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ.',
                reply_markup=None
            )

    except Exception as e:
        await cb.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–µ–º–∞")
        await state.clear()


@r.message(AutoResponseState.budget)
async def budget_message_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±—é–¥–∂–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ),
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    try:
        budget_from = int(msg.text.split('-')[0])
        budget_to = int(msg.text.split('-')[1])
        assert budget_from <= budget_to
    except:
        await msg.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–æ—Ç}-{–¥–æ}. –ë–ï–ó –ü–†–û–ë–ï–õ–û–í. –ü—Ä–∏–º–µ—Ä:\n\n'
            '55000-90000'
        )
    else:
        await state.update_data(budget_from=budget_from, budget_to=budget_to)
        await state.set_state(AutoResponseState.deadline_days)
        await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞(–ø—Ä–∏–º–µ—Ä 10–¥ 2—á, 12–¥, 5—á), '
                         '–≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤.')


@r.callback_query(AutoResponseState.budget)
async def budget_handler(cb, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±—é–¥–∂–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤ (–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤),
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    if cb.data == 'none':
        await state.update_data(budget_from=0, budget_to=10000000)
    else:
        budget = [int(i) for i in cb.data.split('-')]
        await state.update_data(budget_from=budget[0], budget_to=budget[1])
    await cb.message.delete()
    await state.set_state(AutoResponseState.deadline_days)
    await cb.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞(–ø—Ä–∏–º–µ—Ä 10–¥ 2—á, 12–¥, 5—á), '
                            '–≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤.')


@r.message(AutoResponseState.deadline_days)
async def deadline_days_message_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤
    (—á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
    """
    msg_validated = deadline_message_validate(msg.text)
    if not msg_validated:
        await msg.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.')
    else:
        await state.update_data(deadline_days=str_to_hours_converter(msg_validated))
        await state.set_state(AutoResponseState.qty_freelancers)
        await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.')


@r.message(AutoResponseState.qty_freelancers)
async def qty_freelancers_handler(msg, state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    –¥–∞–Ω–Ω—ã—Ö –ø–æ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–µ–º—É –æ—Ç–∫–ª–∏–∫–æ–≤
    """
    try:
        int(msg.text)
        assert 1 <= int(msg.text) <= 100
    except:
        await msg.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ß–∏—Å–ª–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¶–ï–õ–´–ú, –æ—Ç 1 –¥–æ 100.')
    else:
        await state.update_data(qty_freelancers=int(msg.text))
        await confirm_auto_response_sender(msg, state)


async def confirm_auto_response_sender(event, state):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ "—Å–±—Ä–æ—Å–∏—Ç—å"
    """
    auto_response_data = await state.get_data()
    budget = f'–æ—Ç {auto_response_data["budget_from"]}‚ÇΩ –¥–æ {auto_response_data["budget_to"]}‚ÇΩ'

    await state.set_state(AutoResponseState.confirm)
    await event.bot.send_message(
        event.chat.id,
        f'<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:</b>\n\n'
        f'<b>–ë—é–¥–∂–µ—Ç:</b> {budget}\n\n'
        f'<b>–°—Ä–æ–∫:</b> {deadline_converted_output(auto_response_data["deadline_days"])}\n\n'
        f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b> {auto_response_data["qty_freelancers"]}\n\n',
        reply_markup=confirm_task()
    )


@r.callback_query(AutoResponseState.confirm)
async def confirm_auto_response_handler(cb, state, db_session):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–µ–º—É –æ—Ç–∫–ª–∏–∫–æ–≤.
    –í —Å–ª—É—á–∞–µ —Å–±—Ä–æ—Å–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç
    """
    state_data = await state.get_data()
    task_id = state_data.get('task_id')
    if cb.data == 'confirm':
        auto_response = TaskAutoResponse(
            **state_data,
        )
        db_session.add(auto_response)
        db_session.commit()
        await cb.message.edit_text(
            f'–û—Ç–∫–ª–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.',
            reply_markup=None
        )
        await state.clear()
    else:
        await cb.massage.answer(
            '–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µüëá',
            reply_markup=choose_auto_response()
        )
        await state.clear()
        await state.set_state(AutoResponseState.select)
        await state.update_data(task_id=task_id)



async def publish_new_task(task):
    """
    –ü—Ä–æ–¥—é—Å–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å—é–º–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    """
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection = await aio_pika.connect_robust(host=loader.RABBIT_HOST, port=5672, timeout=10)
    async with connection:
        # –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏, –≤—Ä–æ–¥–µ –∫–∞–∫
        routing_key = 'new_task_published'
        # –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
        channel = await connection.channel()
        # –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        await channel.default_exchange.publish(
            aio_pika.Message(body=str(task.id).encode()),
            routing_key=routing_key
        )
