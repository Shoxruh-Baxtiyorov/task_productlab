from psycopg import IntegrityError
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import func
from sqlalchemy.orm import Session
from bot.services.segment_services import SegmentService
from bot.keyboards.resume_keyboards import question_keyboard
from bot.routers.subscribe_router import publish_search_task_message
from bot.services.s3_services import S3Services
from db.crud import CommonCRUDOperations as crud
from db.models import (Contract, ContractStatusType, Resume, Segment, Subscription, 
                       SubscriptionType, Task, User, UserSegment, RaitingChangeDirection,
                       UserSegmentReasonType, SubscriptionReasonType, SkillLevelType, RatingHistory)
from bot.services.document_parser import DocumentParser
from bot.services.rating_services import RatingService
import logging
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class ResumeStates(StatesGroup):
    waiting_for_resume = State()

r = Router(name='resume_router')


def _calculate_skill_level(claimed_tasks: int, completed_tasks: int) -> SkillLevelType:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if completed_tasks >= 3:
        return SkillLevelType.IN
    elif claimed_tasks > 0 and completed_tasks < 3:
        return SkillLevelType.WILL
    else:
        return SkillLevelType.WANT

ALLOWED_TYPES = [
    'application/pdf', 
    'text/html',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/rtf'
]

@r.message(Command("me"))
async def handle_me_command(message: types.Message, state: FSMContext):
    """Handle /me command - request resume upload"""
    try:
        await state.set_state(ResumeStates.waiting_for_resume)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –∏–∑ hh.ru –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã "
            "–≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf, html, docx –∏–ª–∏ rtf –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞.\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ —Å hh.ru\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏."
        )
    except TelegramBadRequest as e:
        logger.error(f"Telegram error in handle_me_command: {e}")
        await state.clear()

@r.message(ResumeStates.waiting_for_resume, F.text.regexp(r'https?://hh\.ru/resume/[a-zA-Z0-9]+'))
async def handle_hh_link(message: types.Message, state: FSMContext):
    """Handle HH.ru resume link"""
    # TODO: Implement HH.ru resume parsing
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ —Å HH.ru –ø–æ–ª—É—á–µ–Ω–∞. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await state.clear()

@r.message(ResumeStates.waiting_for_resume, F.document)
async def handle_resume_upload(
    message: types.Message,
    state: FSMContext,
    db_session: Session,
    user: User,
    service_manager
):
    """Handle resume file upload"""
    document = message.document
    

    if document.mime_type not in ALLOWED_TYPES:
        if document.mime_type == 'application/msword':
            await message.answer(
                "‚ùå –§–æ—Ä–º–∞—Ç DOC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ DOCX "
                '<a href="https://cloudconvert.com/doc-to-docx">–∑–¥–µ—Å—å</a> '
                "–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. "
                f"–ü–æ–ª—É—á–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {document.mime_type}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, HTML, DOCX –∏–ª–∏ RTF."
            )
        return

    try:
        file = await message.bot.get_file(document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        file_bytes = file_content.read()
        
        parsed_text = DocumentParser.parse_document(file_bytes, document.mime_type)
        if not parsed_text:
            logger.error(f"Failed to parse document {document.file_name} of type {document.mime_type}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await state.clear()
            return

        
        file_content.seek(0)
        
        s3_client = S3Services()
        file_url = await s3_client.upload_file(
            object_name=f"resume_{document.file_name}",
            file=file_content,
            user_id=user.telegram_id
        )


        crud.deactivate_old_resumes(db_session, user.id)

        resume = crud.create_resume(
            session=db_session,
            user_id=user.id,
            file_url=file_url,
            file_type=document.mime_type,
            raw_text=parsed_text,
            source=None
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏ —Ä–µ–∑—é–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reward_given = False
        RESUME_REWARD_COMMENT = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        
        if user.registered_at:
            time_since_registration = datetime.now() - user.registered_at
            if time_since_registration <= timedelta(hours=1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω –±–æ–Ω—É—Å –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—é–º–µ
                existing_reward = db_session.query(RatingHistory).filter(
                    RatingHistory.user_id == user.id,
                    RatingHistory.comment == RESUME_REWARD_COMMENT
                ).first()
                
                if not existing_reward:
                    # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 –±–∞–ª–ª–∞–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–ª–∏
                    await RatingService.user_rating_change(
                        session=db_session,
                        users_id=user.id,
                        change_direction=RaitingChangeDirection.PLUS,
                        score=2,
                        comment=RESUME_REWARD_COMMENT,
                    )
                    reward_given = True
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ–∑—é–º–µ
        await service_manager.rating_services.remove_resume_reminder_tasks(user.id)
        
        if reward_given:
            await message.answer(
                "‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n"
                "üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 2 –±–∞–ª–ª–∞ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∑–∞ –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—é–º–µ!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            )
        else:
            await message.answer(
                "‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! "
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            )
 

        if "–ù–∞–≤—ã–∫–∏" in parsed_text:
            try:
                skills_text = parsed_text.split("–ù–∞–≤—ã–∫–∏")[-1].split("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è")[0].strip()
                final = [s for s in skills_text.split() if s.strip()]

                if len(final) > 0:
                    update_skills(db_session, final, user)
                    await state.update_data(resume_skills=final)

                    await message.answer(
                        f"""–ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —É –≤–∞—Å {len(final)} –¥–æ–ø.—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É.
                        \n–•–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –º—ã –≤–∞–º —Å–æ–∑–¥–∞–ª–∏ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –≤–∞—à–∏–º –Ω–∞–≤—ã–∫–∞–º?
                        \n{{{", ".join(final)}}}""",
                        reply_markup=question_keyboard()
                    )
                
                if "–û–±–æ –º–Ω–µ" in parsed_text:
                    try:
                        bio = parsed_text.split("–û–±–æ –º–Ω–µ")[-1].strip().split("–†–µ–∑—é–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")[0].strip()
                        update_bio(db_session, bio, user)
                    except Exception as e:
                        logger.error(f"Error get tbio of resume: {e}", exc_info=True) 
        

            except Exception as e:
                logger.error(f"Error get tags of resume: {e}", exc_info=True) 
        

    except Exception as e:
        logger.error(f"Error processing resume: {e}", exc_info=True) 
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()

@r.message(ResumeStates.waiting_for_resume)
async def handle_invalid_resume(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, HTML, DOC –∏–ª–∏ DOCX, "
        "–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ —Å hh.ru"
    ) 

@r.callback_query(F.data == "resume_question_yes")
async def handle_resume_question_yes(callback: types.CallbackQuery, state : FSMContext, db_session : Session, user : User):
    await callback.message.delete()

    data = await state.get_data()
    skills = data.get("resume_skills", [])

    subscription = Subscription(
        user_id=user.id,
        tags=skills,    
        budget_from = None,
        budget_to = None,
        type = SubscriptionType.OR,
        reason_added=SubscriptionReasonType.USER_RESUME,
        segments_processed=True,
        fromme=True
    )

    db_session.add(subscription)
    logger.info(f"[ResumeQuestionYes] Subscription created for user {user.id} with tags: {skills}")

    skills_lower = [s.lower() for s in skills]

    existing_user_segments = db_session.query(UserSegment).filter_by(user_id=user.id).all()
    existing_segment_ids = {us.segment_id for us in existing_user_segments}

    segments_in_db = db_session.query(Segment).filter(func.lower(Segment.name).in_(skills_lower)).all()
    existing_segment_names = {segment.name.lower() for segment in segments_in_db}

    missing_skills = [skill.lower() for skill in skills if skill.lower() not in existing_segment_names]
    for skill in missing_skills:
        new_segment = Segment(name=skill)
        db_session.add(new_segment)
    try:
        db_session.commit()
    except IntegrityError:
        db_session.rollback()
    finally:
        segments_in_db = db_session.query(Segment).filter(func.lower(Segment.name).in_(skills_lower)).all()



    for segment in segments_in_db:
        if segment.id not in existing_segment_ids:
            claimed = db_session.query(func.count(Contract.id)).join(Task).filter(
                Contract.freelancer_id == user.id,
                Task.description.ilike(f'%{segment.name}%')
            ).scalar() or 0

            completed = db_session.query(func.count(Contract.id)).join(Task).filter(
                Contract.freelancer_id == user.id,
                Contract.status == ContractStatusType.COMPLETED,
                Task.description.ilike(f'%{segment.name}%')
            ).scalar() or 0

            skill_level = _calculate_skill_level(claimed, completed)

            new_user_segment = UserSegment(
                user_id=user.id,
                segment_id=segment.id,
                claimed_tasks=claimed,
                completed_tasks=completed,
                skill_level=skill_level,
                reason_added=UserSegmentReasonType.USER_RESUME,
                fromme=True
            )
            db_session.add(new_user_segment)

    user_from_db = db_session.query(User).get(user.id)
    if user_from_db:
        user_from_db.fromme = True


    db_session.commit()

    logger.info(f"[ResumeQuestionYes] DB commit completed for user {user.id}")


    await callback.message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await publish_search_task_message(subscription)

    await state.clear()

@r.callback_query(F.data == "resume_question_no")
async def handle_resume_question_no(callback: types.CallbackQuery, state: FSMContext, db_session: Session, user: User):
    await callback.message.delete()
    user_from_db = db_session.query(User).filter_by(id=user.id).first()
    if user_from_db:
        user_from_db.fromme = False 
    segments_from_db = db_session.query(UserSegment).filter_by(user_id=user.id).first()
    if segments_from_db:
        segments_from_db.fromme = False
    subscription_from_db = db_session.query(Subscription).filter_by(user_id=user.id).first()
    if subscription_from_db:
        subscription_from_db.fromme = False

    db_session.commit()

    await state.clear()
    
def update_skills(db_session : Session, skills : list[str], user : User):
    user_from_bd = db_session.query(User).filter_by(id=user.id).first()
    if user_from_bd:
        user_from_bd.skills = skills
        db_session.commit()

def update_bio(db_session: Session, bio: str, user : User):
    user_from_bd = db_session.query(User).filter_by(id=user.id).first()
    if user_from_bd:
        user_from_bd.bio = bio
        db_session.commit()

@r.callback_query(F.data == "no_resume")
async def handle_no_resume(callback: types.CallbackQuery, db_session: Session, user: User, service_manager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£ –º–µ–Ω—è –Ω–µ—Ç —Ä–µ–∑—é–º–µ'
    –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ
    """
    try:
        await callback.message.delete()
    except Exception:
        pass
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ–∑—é–º–µ
    await service_manager.rating_services.remove_resume_reminder_tasks(user.id)
    
    await callback.bot.send_message(
        callback.from_user.id,
        "–•–æ—Ä–æ—à–æ, –º—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ.\n\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /me"
    )
    