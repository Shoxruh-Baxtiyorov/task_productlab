"""empty message

Revision ID: 038d948f19c2
Revises: 
Create Date: 2023-12-29 14:08:25.930563

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '038d948f19c2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('token', sa.UUID(), nullable=True),
    sa.Column('telegram_id', sa.BigInteger(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('reff_telegram_id', sa.Integer(), nullable=True),
    sa.Column('bio', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('location_latitude', sa.Float(), nullable=True),
    sa.Column('location_longitude', sa.Float(), nullable=True),
    sa.Column('roles', postgresql.ARRAY(sa.Enum('FREELANCER', 'CLIENT', name='roletype', native_enum=False)), nullable=True),
    sa.Column('country', sa.Enum('RUSSIA', 'NOTRUSSIA', name='countrytype'), nullable=True),
    sa.Column('juridical_type', sa.Enum('IP', 'SELF_EMPLOYED', 'OOO', 'PHYSICAL', name='juridicaltype'), nullable=True),
    sa.Column('payment_types', postgresql.ARRAY(sa.Enum('SBER', 'SELF_EMPLOYED', 'CRYPTO', 'NONCASH', name='paymenttype', native_enum=False)), nullable=True),
    sa.Column('prof_level', sa.Enum('JUNIOR', 'MIDDLE', 'SENIOR', name='professionalleveltype'), nullable=True),
    sa.Column('skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('is_registered', sa.Boolean(), nullable=True),
    sa.Column('is_dead', sa.Boolean(), nullable=True),
    sa.Column('notification_types', postgresql.ARRAY(sa.Enum('PLATFORM', 'NEWTASKS', 'RESPONSES', name='notificationtype', native_enum=False)), nullable=True),
    sa.Column('free_task_period', sa.DateTime(), nullable=True),
    sa.Column('banned_until', sa.DateTime(), nullable=True),
    sa.Column('registered_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('distributions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('roles', postgresql.ARRAY(sa.Enum('FREELANCER', 'CLIENT', name='roletype', native_enum=False)), nullable=True),
    sa.Column('message_chat_id', sa.BigInteger(), nullable=True),
    sa.Column('message_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String(length=50)), nullable=True),
    sa.Column('budget_from', sa.Integer(), nullable=True),
    sa.Column('budget_to', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('SEND', 'DONTSEND', name='subscriptionstatustype'), nullable=True),
    sa.Column('type', sa.Enum('AND', 'OR', name='subscriptiontype'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status', sa.Enum('ATWORK', 'ACCEPTSOFFERS', 'ARCHIVED', 'COMPLETED', 'CANCELLED', name='taskstatustype'), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=5000), nullable=True),
    sa.Column('budget', sa.Integer(), nullable=True),
    sa.Column('budget_from', sa.Integer(), nullable=True),
    sa.Column('budget_to', sa.Integer(), nullable=True),
    sa.Column('deadline_days', sa.Integer(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('freelancer_id', sa.Integer(), nullable=True),
    sa.Column('archived', sa.Boolean(), nullable=True),
    sa.Column('work_started_at', sa.DateTime(), nullable=True),
    sa.Column('work_stopped_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_relations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('related_user_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('NEUTRAL', 'HIDE_OFFERS', 'DISALLOW_OFFERS', 'OFFERSENDED', 'STARTWORK', 'WORKINVITE', 'WORKDONE', 'ONECLOSEDPROJECT', 'BLOCKED', name='userrelationstatustype'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['related_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('offers',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('status', sa.Enum('SAMPLED', 'PENDING', 'REJECTED', 'ACCEPTED', name='offerstatustype'), nullable=True),
    sa.Column('budget', sa.Integer(), nullable=True),
    sa.Column('deadline_days', sa.Integer(), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('offers')
    op.drop_table('user_relations')
    op.drop_table('tasks')
    op.drop_table('subscriptions')
    op.drop_table('distributions')
    op.drop_table('users')
    # ### end Alembic commands ###
